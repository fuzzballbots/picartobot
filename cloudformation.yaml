---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: PicartoBot powered by CloudFormation, S3, API Gateway, and Lambda
Resources:
  FetchedQueue:
    Type: AWS::SQS::Queue
    Properties:
      RedrivePolicy:
        deadLetterTargetArn: FetchedFailQueue.Arn
        maxReceiveCount: 10

  FetchedFailQueue:
    Type: AWS::SQS::Queue
      
  PushedQueue:
    Type: AWS::SQS::Queue
    Properties:
      RedrivePolicy:
        deadLetterTargetArn: PushedFailQueue.Arn
        maxReceiveCount: 10

  PushedFailQueue:
    Type: AWS::SQS::Queue

  CollectorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/function.zip
      Handler: index.collectorHandler
      Runtime: nodejs12.x
      MemorySize: 1536
      Timeout: 60
      Role: !GetAtt PicartoBotRole.Arn
      Events:
        PicartoBotMainSchedule:
          Type: Schedule
          Properties: 
            Description: Run the Function every N minutes
            Enabled: True
            Name: PicartoBotTimer
            Schedule: rate(5 minutes)

  FetcherFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/function.zip
      Handler: index.fetcherHandler
      Runtime: nodejs12.x
      MemorySize: 1536
      Timeout: 60
      Role: !GetAtt PicartoBotRole.Arn
      Events:
        PicarotBotFetchQueue:
          Type: SQS
          Properties: 
            BatchSize: 10
            Queue: FetchedQueue.Arn
            Enabled: True

  PusherFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/function.zip
      Handler: index.pusherHandler
      Runtime: nodejs12.x
      MemorySize: 1536
      Timeout: 60
      DearLetterQueue: PushFailQueue.Arn
      Role: !GetAtt PicartoBotRole.Arn
      Events:
        PicarotBotPusherQueue:
          Type: SQS
          Properties: 
            BatchSize: 10
            Queue: PushedQueue.Arn
            Enabled: True

  PicartoBotRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: sqs1
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sqs:ReceiveMessage
            - sqs:SendMessage
            - sqs:PurgeQueue
            - sqs:DeleteMessage
            Resource: !Sub PushQueue.Arn
      - PolicyName: sqs2
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sqs:ReceiveMessage
            - sqs:SendMessage
            - sqs:PurgeQueue
            - sqs:DeleteMessage
            Resource: !Sub FetchedQueue.Arn


